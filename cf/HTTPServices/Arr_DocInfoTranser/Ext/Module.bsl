
Функция pingreturnresponse(Запрос)
	Ответ = Новый HTTPСервисОтвет(200); 
	Ответ.УстановитьТелоИзСтроки("OK");
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Возврат Ответ;
КонецФункции

#Область volume1_GET 

Функция v1GET_gate(Запрос)
	УстановитьПривилегированныйРежим(Истина); 	//Привилегированный режим позволит методам API работать
												//даже с авторизацией под служебным пользователем, у которого нет интерактивных прав на запрашиваемые данные
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("ИмяМетода");
	
	Если НЕ Arr_АвторизацияПереопределяемый.АвторизоватьПользователя(Запрос, Неопределено) тогда
		Ответ				= Обработать401();
		Возврат Ответ;
	КонецЕсли;
	
	Если ИмяМетода 			= "docnames" тогда
		ПолучитьНаименованияДокументов(Запрос, Ответ);
	ИначеЕсли ИмяМетода 	= "storagelist" тогда
		ПолучитьНаименованияСкладов(Запрос, Ответ);
	ИначеЕсли ИмяМетода	= "nomenclaturelist" тогда
		ПолучитьНаименованияНоменклатуры(Запрос, Ответ);
	ИначеЕсли ИмяМетода 	= "objbyguid" тогда
		ПолучитьОбъектПоГУИД(Запрос, Ответ); 
	ИначеЕсли ИмяМетода	= "doclist" тогда
		ПолучитьСписокЗапрашиваемыхДокументов(Запрос, Ответ); 
	ИначеЕсли ИмяМетода	= "getconnections" тогда
		ПолучитьСвязанныеДокументыПоГУИД(Запрос, Ответ)
	Иначе 
		Ответ				= Обработать404();
	КонецЕсли;
	
	Возврат Ответ;
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции  

Процедура ПолучитьНаименованияДокументов(Запрос, Ответ) 
	МассивНаименованийДокументов = новый Массив;
	
	Для каждого Элем из Метаданные.Документы цикл
		МассивНаименованийДокументов.Добавить(Элем.Имя);		
	КонецЦикла; 
	
	JSON = Arr_JSON.ПростаяЗаписьJSON(МассивНаименованийДокументов);  
	
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
КонецПроцедуры

Процедура ПолучитьНаименованияСкладов(Запрос, Ответ) 
	СоответствиеСкладов = новый Соответствие;
	
	лТекст = "
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.Наименование КАК СкладСтрока
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|";
	
	лЗапрос = Новый Запрос(лТекст);
		
	лВыборка = лЗапрос.Выполнить().Выбрать();
	
	Пока лВыборка.Следующий() Цикл
		СоответствиеСкладов.Вставить(лВыборка.СкладСтрока, Строка(лВыборка.Склад.УникальныйИдентификатор()));
	КонецЦикла;

	
	JSON = Arr_JSON.ПростаяЗаписьJSON(СоответствиеСкладов);  
	
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
КонецПроцедуры 

Процедура ПолучитьНаименованияНоменклатуры(Запрос, Ответ)
	СоответствиеНоменклатуры = новый Соответствие;
	
	лТекст = "
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК НоменклатураСтрока,
	|	ISNULL(Номенклатура.Артикул, """") КАК Артикул	
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|";
	
	лЗапрос = Новый Запрос(лТекст);
		
	лВыборка = лЗапрос.Выполнить().Выбрать();
	
	Пока лВыборка.Следующий() Цикл 
		МассивРеквизитов = новый Массив;
		МассивРеквизитов.Добавить(лВыборка.Артикул);
		МассивРеквизитов.Добавить(Строка(лВыборка.Номенклатура.УникальныйИдентификатор()));
		
		СоответствиеНоменклатуры.Вставить(лВыборка.НоменклатураСтрока, МассивРеквизитов);
	КонецЦикла;

	
	JSON = Arr_JSON.ПростаяЗаписьJSON(СоответствиеНоменклатуры);  
	
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);	
КонецПроцедуры

Процедура ПолучитьОбъектПоГУИД(Запрос, Ответ)
	
	GUID = Запрос.ПараметрыЗапроса.Получить("guid");
	
	Если НЕ ЗначениеЗаполнено(GUID) тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли;
	Попытка		
		УникальныйИдентификатор123 = Новый УникальныйИдентификатор(GUID)		
	Исключение	
		ОО = ОписаниеОшибки();
		Ответ = Обработать500(ОО);
		Возврат;		
	КонецПопытки;
	
	// все объекты по которым можно получить ссылку
	Если ПроверитьСсылкуПоМенеджеруОбъекта(Справочники,УникальныйИдентификатор123) Тогда
		СсылкаНаОбъект = ПолучитьСсылкуПоМенеджеруОбъекта(Справочники, УникальныйИдентификатор123);	
		Менеджер = "Справочник";
	ИначеЕсли ПроверитьСсылкуПоМенеджеруОбъекта(Документы,УникальныйИдентификатор123) Тогда
		СсылкаНаОбъект = ПолучитьСсылкуПоМенеджеруОбъекта(Документы, УникальныйИдентификатор123);	
		Менеджер = "Документ"; 
	КонецЕсли; 
	ТаблицаПереопределяемый = СсылкаНаОбъект.ПолучитьОбъект().Метаданные().Имя;
	
	лТекст = "
	|ВЫБРАТЬ
	|	Таблица.*
	|ИЗ
	|	&МенеджерПереопределяемый.&ТаблицаПереопределяемый КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|";
	
	лТекст = СтрЗаменить(лТекст, "&МенеджерПереопределяемый.&ТаблицаПереопределяемый", СтрШаблон("%1.%2", Менеджер, ТаблицаПереопределяемый));
	лЗапрос = Новый Запрос(лТекст); 
	лЗапрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ЛТЗ = лЗапрос.Выполнить().Выгрузить(); 
	
	ТЗСсылок = ЛТЗ.Скопировать(, "Ссылка");
	ТЗСсылок.Свернуть("Ссылка"); 
	
	ИтоговыйСтруктура = новый Структура;
	
	СЧОбъектов = 0;
	Для каждого Элем из ТЗСсылок цикл
		СЧОбъектов = СЧОбъектов + 1;
		СлепокСтруктуры = новый Структура;  
		СлепокСтруктуры.Вставить("GUID", Строка(Элем.Ссылка.УникальныйИдентификатор()));
		
		Для каждого Колонка из ЛТЗ.Колонки цикл
			СлепокСтруктуры.Вставить(Колонка.Имя, );
		КонецЦикла;  
		
		ИнфоОбъекта = ЛТЗ.Найти(Элем.Ссылка, "Ссылка");
		
		Если ИнфоОбъекта <> Неопределено тогда
			ЗаполнитьЗначенияСвойств(СлепокСтруктуры, ИнфоОбъекта);
			
			ИтоговыйСтруктура.Вставить(СтрШаблон("Объект%1", СЧОбъектов),СлепокСтруктуры);
		КонецЕсли;                                  
	КонецЦикла; 
	
	Arr_JSON.ПривестиКПримитивномуТипу(ИтоговыйСтруктура, ЛТЗ); 
	
	JSON = Arr_JSON.ПростаяЗаписьJSON(ИтоговыйСтруктура);
	
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

КонецПроцедуры 

Процедура ПолучитьСвязанныеДокументыПоГУИД(Запрос, Ответ) 
	GUID = Запрос.ПараметрыЗапроса.Получить("guid");
	
	Если НЕ ЗначениеЗаполнено(GUID) тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли;
	Попытка		
		УникальныйИдентификатор123 = Новый УникальныйИдентификатор(GUID)		
	Исключение	
		ОО = ОписаниеОшибки();
		Ответ = Обработать500(ОО);
		Возврат;		
	КонецПопытки;
	
	// все объекты по которым можно получить ссылку
	Если ПроверитьСсылкуПоМенеджеруОбъекта(Справочники,УникальныйИдентификатор123) Тогда
		СсылкаНаОбъект = ПолучитьСсылкуПоМенеджеруОбъекта(Справочники, УникальныйИдентификатор123);	
		Менеджер = "Справочник";
	ИначеЕсли ПроверитьСсылкуПоМенеджеруОбъекта(Документы,УникальныйИдентификатор123) Тогда
		СсылкаНаОбъект = ПолучитьСсылкуПоМенеджеруОбъекта(Документы, УникальныйИдентификатор123);	
		Менеджер = "Документ"; 
	КонецЕсли; 

	JSON =  ПолучитьСвязанныеДокументы(СсылкаНаОбъект); 
	
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

КонецПроцедуры

Процедура ПолучитьСписокЗапрашиваемыхДокументов(Запрос, Ответ)
	
	ДатаНачала 		= Запрос.ПараметрыЗапроса.Получить("datetime_start");
	ДатаОкончания 	= Запрос.ПараметрыЗапроса.Получить("datetime_end");  
	ТаблицаПереопределяемый = Запрос.ПараметрыЗапроса.Получить("doctype");
	
	Если НЕ ТаблицаСуществует(ТаблицаПереопределяемый) тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли;
	
	//Не указан параметр, по которому определяется нужный документ
	Если НЕ ЗначениеЗаполнено(ТаблицаПереопределяемый) тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли;
	
	ЗапросБезВремени = Ложь;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) тогда
		ЗапросБезВремени = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗапросБезВремени тогда
		Попытка 
			ДатаНачала 		= Дата(ДатаНачала);
			ДатаОкончания 	= Дата(ДатаОкончания);
		Исключение
			Ответ = Обработать400();
			Возврат;	//Дата была передана в параметры запросы строкой, но преобразовать к типу "Дата" не удалось.
		КонецПопытки;
	КонецЕсли;
		
	Если ЗапросБезВремени тогда	
		лТекст = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.&ТаблицаПереопределяемый КАК Таблица
		|";  		
	Иначе	
		лТекст = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.&ТаблицаПереопределяемый КАК Таблица
		|ГДЕ
		|	Таблица.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|"; 
	КонецЕсли;
	
	лТекст 	= СтрЗаменить(лТекст, "&ТаблицаПереопределяемый", ТаблицаПереопределяемый);
	лЗапрос 	= новый Запрос(лТекст);
	
	лЗапрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	лЗапрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ЛТЗ = лЗапрос.Выполнить().Выгрузить();
	
	СоответствиеСтруктур = новый Соответствие;
	Для каждого Обж из ЛТЗ цикл
		БазоваяСтруктура = новый Структура("GUID, Дата, Номер, Организация, Контрагент, СуммаДокумента");
		ЗаполнитьЗначенияСвойств(БазоваяСтруктура, Обж.Ссылка);
		БазоваяСтруктура.GUID = Строка(Обж.Ссылка.УникальныйИдентификатор());
				
		МассивУдаляемыхКлючей = новый Массив;
		
		//Циклом запоминаем, какие ключи у структуры пустые
		Для каждого Элем из БазоваяСтруктура цикл
			Если НЕ ЗначениеЗаполнено(Элем.Значение) тогда
				МассивУдаляемыхКлючей.Добавить(Элем.Ключ);
			КонецЕсли;
		КонецЦикла;
		//Очищаем структуру от лишних ключей
		Для каждого Элем из МассивУдаляемыхКлючей цикл
			БазоваяСтруктура.Удалить(Элем);		
		КонецЦикла;		
		//Приводим к примитивному типу в угоду сериализации в JSON
		Для каждого Элем из БазоваяСтруктура цикл
			Если ТипЗнч(Элем.Значение) <> Тип("Число") И ТипЗнч(Элем.Значение) <> Тип("Строка") тогда 
				//Элем.Значение = Строка(Элем.Значение);
				БазоваяСтруктура.Вставить(Элем.Ключ, Строка(Элем.Значение));
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеСтруктур.Вставить(Строка(Обж.Ссылка), БазоваяСтруктура);

	КонецЦикла;  
	
	JSON = Arr_JSON.ПростаяЗаписьJSON(СоответствиеСтруктур);
	
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
КонецПроцедуры

Функция ПроверитьСсылкуПоМенеджеруОбъекта(ОбъектыМенеджер,УникальныйИдентификатор)
	
	Для Каждого Менеджер Из ОбъектыМенеджер Цикл
		
		СсылкаНаОбъект = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
		
		Если СсылкаНаОбъект.ПолучитьОбъект() <> Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции 

Функция ПолучитьСсылкуПоМенеджеруОбъекта(ОбъектыМенеджер,УникальныйИдентификатор)
	
	Для Каждого Менеджер Из ОбъектыМенеджер Цикл
		
		СсылкаНаОбъект = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
		
		Если СсылкаНаОбъект.ПолучитьОбъект() <> Неопределено Тогда
			
			Возврат СсылкаНаОбъект;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти //volume1_GET

#Область volume2_POST  

Функция v2POST_gate(Запрос)
	УстановитьПривилегированныйРежим(Истина); 	//Привилегированный режим позволит методам API 
												//работать даже с авторизацией под служебным пользователем, у которого нет интерактивных прав на запрашиваемые данные
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("ИмяМетода");
	
	Если ИмяМетода 			= "getinfospecial" тогда
		ПолучитьДокументыПоТипу(Запрос, Ответ);	
	ИначеЕсли ИмяМетода 	= "getstoragecontent" тогда
	    ПолучитьОстаткиПоСкладам(Запрос, Ответ);
	Иначе 
		Ответ				= Обработать404();
	КонецЕсли;
	
	Возврат Ответ;
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции  

Процедура ПолучитьДокументыПоТипу(Запрос, Ответ)
	ТелоКакСтрока = Запрос.ПолучитьТелоКакСтроку();
	ТелоКакСтруктура = Arr_JSON.ПрочитатьТелоJSON(Запрос, ТелоКакСтрока);
	
	Если ТелоКакСтруктура = Неопределено ИЛИ НЕ ТелоКакСтруктура.Свойство("doctype") ИЛИ НЕ ТелоКакСтруктура.Свойство("docnum") тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли;
	лТекст = "
	|ВЫБРАТЬ
	|	Таблица.*
	|ИЗ
	|	Документ.&ТаблицаПереопределяемый КАК Таблица
	|ГДЕ
	|	Таблица.Номер В (&МассивНомеров)
	|";  
	
	//Необязательный параметр в структуре, дающий возможность дополнительно отбирать документы по времени 
	ДатаИспользуется = Ложь; 
	ДатаНачала		= Неопределено;
	ДатаОкончания	= Неопределено;
	Если ТелоКакСтруктура.Свойство("datetime_start") И ТелоКакСтруктура.Свойство("datetime_end") тогда //Формат используемой даты в теле запроса должен выглядеть как 'ГГГГММДДЧЧММСС', например '20130724132506' (24.07.2013 13:25:06)
		
		Попытка 
			ДатаНачала 		= Дата(ТелоКакСтруктура.datetime_start);
			ДатаОкончания  	= Дата(ТелоКакСтруктура.datetime_end);
			лТекст = СтрЗаменить(лТекст, "Таблица.Номер В (&МассивНомеров)", "Таблица.Номер В (&МассивНомеров) И Таблица.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания");
			
			ДатаИспользуется = Истина;
		Исключение
			//Не удалось преобразовать строковый параметр даты к типу "дата"
			ОО = ОписаниеОшибки();
			ДатаИспользуется = Ложь; 
		КонецПопытки;
		
	КонецЕсли;
	//Подмена параметра в тексте запроса на имя таблицы
	ТаблицаПереопределяемый = ТелоКакСтруктура.doctype;
	Если НЕ ТаблицаСуществует(ТаблицаПереопределяемый) тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли;
	
	лТекст = СтрЗаменить(лТекст, "&ТаблицаПереопределяемый", ТаблицаПереопределяемый); 
	
	лЗапрос = Новый Запрос(лТекст);
	
	// Присвоение значений переменным параметров.
	Если ТипЗнч(ТелоКакСтруктура.docnum) = Тип("Массив") тогда
		МассивНомеров = ТелоКакСтруктура.docnum;
	Иначе
		МассивНомеров = новый Массив;
		МассивНомеров.Добавить(ТелоКакСтруктура.docnum);
	КонецЕсли;
	
	// Установка параметров.
	лЗапрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	Если ДатаИспользуется тогда
		лЗапрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		лЗапрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);				
	КонецЕсли;	
	
	ИтоговыйСтруктура 	= новый Структура;
	Попытка
		ЛТЗ = лЗапрос.Выполнить().Выгрузить(); 
	Исключение 
		//Т.к. в запросе имеется всего 2 параметра и никаких привязок к определенным полям (выборка идет через конструкцию "Таблица.*"), то 
		//исключительная ситуация может генерироваться только в случае некорректных входных данных из тела запроса. 
		Ответ = Обработать400();
		Возврат;
	КонецПопытки;
	
	ТЗСсылок = ЛТЗ.Скопировать(, "Ссылка");
	ТЗСсылок.Свернуть("Ссылка");
	
	СЧОбъектов = 0;
	Для каждого Элем из ТЗСсылок цикл
		СЧОбъектов = СЧОбъектов + 1;
		СлепокСтруктуры = новый Структура; 
		СлепокСтруктуры.Вставить("GUID", Строка(Элем.Ссылка.УникальныйИдентификатор()));
		
		Для каждого Колонка из ЛТЗ.Колонки цикл
			СлепокСтруктуры.Вставить(Колонка.Имя, );
		КонецЦикла;  
		
		ИнфоОбъекта = ЛТЗ.Найти(Элем.Ссылка, "Ссылка");
		
		Если ИнфоОбъекта <> Неопределено тогда
			ЗаполнитьЗначенияСвойств(СлепокСтруктуры, ИнфоОбъекта);
			
			ИтоговыйСтруктура.Вставить(СтрШаблон("Объект%1", СЧОбъектов),СлепокСтруктуры);
		КонецЕсли;                                  
	КонецЦикла; 
	
	Arr_JSON.ПривестиКПримитивномуТипу(ИтоговыйСтруктура, ЛТЗ); 
	Если ТелоКакСтруктура.Свойство("exept") И ЗначениеЗаполнено(ТелоКакСтруктура.exept) тогда
		Arr_JSON.ИсключитьСвойства(ИтоговыйСтруктура, ТелоКакСтруктура.exept);
	КонецЕсли;
	JSON = Arr_JSON.ПростаяЗаписьJSON(ИтоговыйСтруктура);
	
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
КонецПроцедуры 

Процедура ПолучитьОстаткиПоСкладам(Запрос, Ответ)
	ТелоКакСтрока = Запрос.ПолучитьТелоКакСтроку();
	ТелоКакСтруктура = Arr_JSON.ПрочитатьТелоJSON(Запрос, ТелоКакСтрока);
	
	лТекст = "
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК Наименование,
	|	ТоварыНаСкладахОстатки.Характеристика.Наименование КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК ВНаличииОстаток,
	|	ТоварыНаСкладахОстатки.Номенклатура.Артикул КАК Артикул,
	|	ТоварыНаСкладахОстатки.Номенклатура.Производитель.Наименование КАК Производитель,
	|	ТоварыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.СтруктурнаяЕдиница В (&Ссылка)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница
	|";

	
	ЗапросКонтента = новый Запрос(лТекст);
		
	Если НЕ ТелоКакСтруктура.Свойство("storage_byguid") ИЛИ НЕ ТелоКакСтруктура.Свойство("storagelist") тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(ТелоКакСтруктура.storagelist) <> Тип("Массив") тогда
		Ответ = Обработать400();
		Возврат;
	КонецЕсли;
	
	склад_ПоискПоГУИД 	= ТелоКакСтруктура.storage_byguid;

	МассивСкладов 		= новый Массив();
	
	Для каждого Элем из ТелоКакСтруктура.storagelist цикл
		Если склад_ПоискПоГУИД тогда 
			ГУИД 		= новый УникальныйИдентификатор(Элем);
			СкладСсылка = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(ГУИД);
		Иначе
			СкладСсылка = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(Элем, Истина);	
		КонецЕсли;                                                                
		
		Если ЗначениеЗаполнено(СкладСсылка) тогда
			МассивСкладов.Добавить(СкладСсылка);
		КонецЕсли;
	КонецЦикла; 
	
	Если ТелоКакСтруктура.Свойство("specifyproduct") тогда
		ПропускатьУточнения = ложь;
		Если НЕ ТелоКакСтруктура.Свойство("productlist") тогда
			ПропускатьУточнения  = Истина;
		КонецЕсли;
		Если ТипЗнч(ТелоКакСтруктура.productlist) <> Тип("Массив") тогда
			ПропускатьУточнения = Истина;
		КонецЕсли;
		
		Если НЕ ПропускатьУточнения тогда
			Нмк_ПоискПоГУИД 			= ТелоКакСтруктура.specifyproduct = "guid";
			Нмк_ПоискПоАртикулу 			= ТелоКакСтруктура.specifyproduct = "art";	
			Нмк_ПоискПоНаименованию 	= ТелоКакСтруктура.specifyproduct = "name"; 
			
			МассивНоменклатуры = новый Массив;
			Для каждого Элем из ТелоКакСтруктура.productlist цикл
				Если Нмк_ПоискПоГУИД тогда
					ГУИД 		= новый УникальныйИдентификатор(Элем);
					НмкСсылка 	= Справочники.Номенклатура.ПолучитьСсылку(ГУИД);	
				ИначеЕсли Нмк_ПоискПоАртикулу тогда
					НмкСсылка 	= Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Элем);	
				Иначе
					НмкСсылка 	= Справочники.Номенклатура.НайтиПоНаименованию(Элем, Истина);
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(НмкСсылка) тогда
					МассивНоменклатуры.Добавить(НмкСсылка);
				КонецЕсли;
			КонецЦикла;  
			
			ЗапросКонтента.Текст = СтрЗаменить(ЗапросКонтента.Текст, "ТоварыНаСкладахОстатки.СтруктурнаяЕдиница В (&Ссылка)", "ТоварыНаСкладахОстатки.СтруктурнаяЕдиница В (&Ссылка) И ТоварыНаСкладахОстатки.Номенклатура В (&Номенклатура)");
			ЗапросКонтента.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		КонецЕсли;
	КонецЕсли;
		
	ЗапросКонтента.УстановитьПараметр("Ссылка", МассивСкладов);
	РезультатЗапроса = ЗапросКонтента.Выполнить();
	ВыборкаПоСкладу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеОбъектов = Новый Соответствие;
	Пока ВыборкаПоСкладу.Следующий() Цикл
		МассивОбъектов = новый Массив;
		
		ВыборкаДетальныеЗаписиКонтент = ВыборкаПоСкладу.Выбрать();
		Пока ВыборкаДетальныеЗаписиКонтент.Следующий() цикл
			сКонтент = новый Структура;
			сКонтент.Вставить("GUID", Строка(ВыборкаДетальныеЗаписиКонтент.Номенклатура.УникальныйИдентификатор()));
			сКонтент.Вставить("Наименование", ВыборкаДетальныеЗаписиКонтент.Наименование);
			сКонтент.Вставить("Характеристика", Строка(ВыборкаДетальныеЗаписиКонтент.Характеристика));
			сКонтент.Вставить("ЕдиницаИзмерения", Строка(ВыборкаДетальныеЗаписиКонтент.ЕдиницаИзмерения));
			сКонтент.Вставить("ВНаличииОстаток", ВыборкаДетальныеЗаписиКонтент.ВНаличииОстаток);
			сКонтент.Вставить("Артикул", ВыборкаДетальныеЗаписиКонтент.Артикул);
			
			МассивОбъектов.Добавить(сКонтент);
		КонецЦикла; 
		СоответствиеОбъектов.Вставить(Строка(ВыборкаПоСкладу.СтруктурнаяЕдиница), МассивОбъектов);
	КонецЦикла;
		
	JSONToGo = Arr_JSON.ПростаяЗаписьJSON(СоответствиеОбъектов);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(JSONToGo, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
КонецПроцедуры

#КонецОбласти //volume2_POST  

#Область ПолучениеСвязанныхДокументов

Функция ПолучитьСвязанныеДокументы(ТекущийДок)
	мДерево = новый ДеревоЗначений;
	ОписаниеТиповСтрока = новый ОписаниеТипов("Строка");
		
	мДерево.Колонки.Добавить("Ссылка");
	мДерево.Колонки.Добавить("ВидДокумента");
	мДерево.Колонки.Добавить("ВалютаДокумента");
	мДерево.Колонки.Добавить("СуммаДокумента");
	мДерево.Колонки.Добавить("Комментарий"); 
	мДерево.Колонки.Добавить("Контрагент");
	мДерево.Колонки.Добавить("Проведен");
	мДерево.Колонки.Добавить("ПометкаУдаления");
	мДерево.Колонки.Добавить("ДокументПредставление");
	мДерево.Колонки.Добавить("ПроведениеРазрешено");
	мДерево.Колонки.Добавить("Организация"); 
	мДерево.Колонки.Добавить("Номер"); 
	мДерево.Колонки.Добавить("Ответственный"); 
	
	мДерево.Колонки.Добавить("ВидОперации");
	мДерево.Колонки.Добавить("Автор");
	мДерево.Колонки.Добавить("СостояниеЗаказа");
	мДерево.Колонки.Добавить("Состояние"); 
		
	ВывестиРодительскиеДокументы(ТекущийДок, мДерево);
	Для каждого СтрокаДерева из мДерево.Строки цикл
		ВывестиПодчиненныеДокументы(СтрокаДерева); 
	КонецЦикла;
			
	JSON = ПолучитьДеревоКакJSON(мДерево); 
	
	Возврат JSON;	
КонецФункции
//Процедура нужна была для приведения значений к простому типу, сейчас же лежит как шаблон
Процедура ОбойтиДеревоРекурсивно(СтрокиДерева, счРекурсии, МассивКолонок)
	Если счРекурсии > 50 тогда Возврат; КонецЕсли;
	Для каждого Элем из СтрокиДерева цикл
		Для каждого Значен из МассивКолонок Цикл
			Элем[Значен] = Строка(Элем[Значен]);		
		КонецЦикла;                          
		
		Если Элем.Строки.Количество() <> 0 тогда
			счРекурсии = счРекурсии + 1;
			ОбойтиДеревоРекурсивно(СтрокиДерева, счРекурсии, МассивКолонок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиРодительскиеДокументы(ДокументСсылка, мДерево)
	
	мУжеВСписке = новый Соответствие;

	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	
	ДокументыСоВходящимиДанными = ДокументыСоВходящимиДанными();
	ЭтоДокументСВходящимНомеромИДатой = ДокументыСоВходящимиДанными.Найти(МетаданныеДокумента.Имя) <>  Неопределено;
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип Из ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				Попытка
					Если ЗначениеРеквизита <> Неопределено
						И Не ЗначениеРеквизита.Пустая()
						И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
						И мУжеВСписке[ЗначениеРеквизита] = Неопределено
						И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено
						И ЗначениеРеквизита <> ДокументСсылка Тогда
						СписокРеквизитов.Добавить(ЗначениеРеквизита, Формат(ЗначениеРеквизита.Дата, "ДФ=yyyyMMddЧЧММсс"));
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		Если МетаданныеДокумента = Метаданные.Документы.СверкаВзаиморасчетов Тогда
			
			Прервать;
			
		КонецЕсли;
		
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип Из ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						СписокРеквизитов.Добавить(ЗначениеРеквизита, Формат(ЗначениеРеквизита.Дата,
							"ДФ=yyyyMMddЧЧММсс"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	СписокРеквизитов.СортироватьПоПредставлению();
	мУжеВСписке.Вставить(ДокументСсылка, Истина);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение, мДерево);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов, мДерево);
	КонецЕсли;
	
	//СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
	СтрокаДерева = мДерево.Строки.Добавить();

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, #Валюта, #Сумма, 
	|#Организация, #ДатаВходящего, #Номер, #НомерВходящий, #Комментарий, #Ответственный, #Контрагент,
	|#СостояниеЗаказа, #Автор, #ВидОперации, #Состояние, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
	| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
	// Эквайринг
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаРасчетов КАК ВалютаДокумента");
	// Конец Эквайринг
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("НомерКорректировки") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние,", "#Состояние, #НомерКорректировки,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерКорректировки", "НомерКорректировки КАК НомерКорректировки");
	КонецЕсли;
	
	Если МетаданныеДокумента.Имя = "СчетФактура"
		ИЛИ МетаданныеДокумента.Имя = "СчетФактураПолученный" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента + СуммаНДСДокумента КАК СуммаДокумента");
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Всего") <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "Всего КАК СуммаДокумента");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "Организация КАК Организация");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "NULL КАК Организация");
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "Ответственный КАК Ответственный");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "NULL КАК Ответственный");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СостояниеЗаказа") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "СостояниеЗаказа КАК СостояниеЗаказа");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "NULL КАК СостояниеЗаказа");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Состояние") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "Состояние КАК Состояние");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Выполнена") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", 
			"ВЫБОР КОГДА Выполнена ТОГДА &ТекстВыполненнойЗадачи ИНАЧЕ &ТекстНеВыполненнойЗадачи КОНЕЦ КАК Состояние");
		Запрос.УстановитьПараметр("ТекстВыполненнойЗадачи", НСтр("ru='Выполнена'"));
		Запрос.УстановитьПараметр("ТекстНеВыполненнойЗадачи", НСтр("ru='Не выполнена'"));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "NULL КАК Состояние");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "Автор КАК Автор");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "NULL КАК Автор");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "ВидОперации КАК ВидОперации");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "NULL КАК ВидОперации");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "Контрагент КАК Контрагент");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "NULL КАК Контрагент");
	КонецЕсли;
	
	СтрокаЗамены = СтрШаблон("%1 КАК ДатаВходящего", ?(ЭтоДокументСВходящимНомеромИДатой, "ДатаВходящегоДокумента", "Null"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", СтрокаЗамены);
	
	СтрокаЗамены = СтрШаблон("%1 КАК НомерВходящий", ?(ЭтоДокументСВходящимНомеромИДатой, "НомерВходящегоДокумента", "Null"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", СтрокаЗамены);
	
	Если Найти(МетаданныеДокумента.ПолноеИмя(),"Документ") > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Комментарий КАК Комментарий");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", 
			"ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Тема) = ТИП(Справочник.ТемыСобытий) ТОГДА ВЫРАЗИТЬ(Тема КАК Справочник.ТемыСобытий).Наименование ИНАЧЕ ВЫРАЗИТЬ(Тема КАК СТРОКА) КОНЕЦ КАК Комментарий");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Описание") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Описание КАК Комментарий");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", """"" КАК Комментарий");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЭтоКорректировочноеУведомлениеОбОстатках = Ложь;
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров")
			И Выборка.НомерКорректировки > 0 Тогда
			ЭтоКорректировочноеУведомлениеОбОстатках = Истина;
		КонецЕсли;
		
		СтрокаДерева.Ссылка = Выборка.Ссылка;
		СтрокаДерева.ВидДокумента = Выборка.Метаданные;
		СтрокаДерева.ВалютаДокумента = Выборка.ВалютаДокумента;
		СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		//СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
		СтрокаДерева.ПроведениеРазрешено = Выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		СтрокаДерева.Организация = Выборка.Организация; 
		СтрокаДерева.Номер = Выборка.Номер; 
		СтрокаДерева.Ответственный = Выборка.Ответственный;
		
		Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
			
			КонтрагентДокумента = КонтрагентДокументаСобытие(СтрокаДерева.Ссылка);
			Если КонтрагентДокумента = "Несколько" Тогда
				СтрокаДерева.НесколькоКонтрагентов = Истина;
			Иначе
				СтрокаДерева.Контрагент = КонтрагентДокумента;
			КонецЕсли;
			
		Иначе
			СтрокаДерева.Контрагент = Выборка.Контрагент;
		КонецЕсли;
		
		СтрокаДерева.ВидОперации = Выборка.ВидОперации;
		СтрокаДерева.Автор = Выборка.Автор;
		СтрокаДерева.СостояниеЗаказа = Выборка.СостояниеЗаказа;
		СтрокаДерева.Состояние = Выборка.Состояние;
		
		Если ЭтоДокументСВходящимНомеромИДатой Тогда
			
			НомерВходящий = ?(ЗначениеЗаполнено(Выборка.НомерВходящий), Выборка.НомерВходящий, "");
			
			ДатаДокумента = Формат(Выборка.ДатаВходящего, "ДФ=dd.MM.yyyy");
			Если ПустаяСтрока(ДатаДокумента) Тогда
				
				ДатаДокумента = Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yyyy");
				
			КонецЕсли;
			
			ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			
			СтрокаДерева.ДокументПредставление = СтрШаблон(НСтр("ru ='%1 %2 (вх. %3) от %4'"), МетаданныеДокумента.Синоним, ПредставлениеНомера, НомерВходящий, ДатаДокумента);
			
		Иначе
			
			ПредставлениеДокумента = Выборка.Представление;
			
			Если ЭтоКорректировочноеУведомлениеОбОстатках Тогда
				ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, НСтр("ru='Уведомление'"), НСтр("ru='Корректировочное уведомление'"));
			КонецЕсли;
			
			СтрокаДерева.ДокументПредставление = ПредставлениеДокумента;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.Ссылка = ДокументСсылка;
		СтрокаДерева.ВалютаДокумента = Выборка.ВалютаДокумента;
		СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		//СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
		СтрокаДерева.ПроведениеРазрешено = ДокументСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		СтрокаДерева.Организация = Выборка.Организация;
		СтрокаДерева.Номер = Выборка.Номер; 
		СтрокаДерева.Ответственный = Выборка.Ответственный;
		СтрокаДерева.ДокументПредставление = Строка(ДокументСсылка);
		
		Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
			
			КонтрагентДокумента = КонтрагентДокументаСобытие(СтрокаДерева.Ссылка);
			Если КонтрагентДокумента = "Несколько" Тогда
				СтрокаДерева.НесколькоКонтрагентов = Истина;
			Иначе
				СтрокаДерева.Контрагент = КонтрагентДокумента;
			КонецЕсли;
			
		Иначе
			СтрокаДерева.Контрагент = Выборка.Контрагент;
		КонецЕсли;
		
		СтрокаДерева.ВидОперации = Выборка.ВидОперации;
		СтрокаДерева.Автор = Выборка.Автор;
		СтрокаДерева.СостояниеЗаказа = Выборка.СостояниеЗаказа;
		СтрокаДерева.Состояние = Выборка.Состояние;
		
	КонецЕсли;
	
КонецПроцедуры    

Функция ДокументыСоВходящимиДанными()
	
	ДокументыСоВходящимиДанными = Новый Массив(5);
	ДокументыСоВходящимиДанными[0] = "ПриходнаяНакладная";
	ДокументыСоВходящимиДанными[1] = "СчетФактураПолученный";
	ДокументыСоВходящимиДанными[2] = "ЗаказПоставщику";
	ДокументыСоВходящимиДанными[3] = "СчетНаОплатуПоставщика";
	ДокументыСоВходящимиДанными[4] = "ДополнительныеРасходы";
	
	Возврат ДокументыСоВходящимиДанными;
	
КонецФункции

Процедура ВывестиБезРодителей(СписокДокументов, мДерево)
	
	мУжеВСписке = Новый Соответствие; 
	мДерево.ПолучитьЭлементы().Очистить();
	
	ДокументыСоВходящимиДанными = ДокументыСоВходящимиДанными();
	
	ОтборПоКонтрагентам = Новый Массив;
	
	//Для Каждого ЭлементМеток Из ДанныеМеток Цикл
	//	ОтборПоКонтрагентам.Добавить(ЭлементМеток.Метка);
	//КонецЦикла;
		
	РасширениеУсловияЗапроса = "";
	ЕстьОтборПоКонтрагентам = ОтборПоКонтрагентам.Количество();
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		
		МетаданныеДокумента = ЭлементСписка.Значение.Метаданные();
		
		ЭтоДокументСВходящимНомеромИДатой = ДокументыСоВходящимиДанными.Найти(МетаданныеДокумента.Имя) <>  Неопределено;
		
		ЭтоДокументСобытие = ?(ТипЗнч(ЭлементСписка.Значение) = Тип("ДокументСсылка.Событие"), Истина, Ложь);
		
		Если ЭтоДокументСобытие Тогда
			
			Если ЕстьОтборПоКонтрагентам Тогда
				РасширениеУсловияЗапроса = " И СобытиеУчастники.Контакт В (&ОтборПоКонтрагентам)";
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка, Ссылка.Проведен, Ссылка.ПометкаУдаления, Ссылка.Представление, 
			|Ссылка.Номер КАК Номер, Ссылка.Содержание КАК Комментарий, Ссылка.Автор КАК Автор, Ссылка.ТипСобытия КАК ВидОперации, 
			|Ссылка.Состояние КАК Состояние, ""Событие"" КАК Метаданные
			|ИЗ Документ.Событие.Участники КАК СобытиеУчастники ГДЕ СобытиеУчастники.Ссылка = &Ссылка" + РасширениеУсловияЗапроса);
			
		Иначе
			
			Если ЕстьОтборПоКонтрагентам Тогда
				РасширениеУсловияЗапроса = " И Ссылка.Контрагент В (&ОтборПоКонтрагентам)";
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, #Валюта, #Сумма, #Организация, #ДатаВходящего, 
			|#НомерВходящий, #Номер, #Комментарий, #Ответственный, #Контрагент, #СостояниеЗаказа, #Автор, #ВидОперации, #Состояние, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
			| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка" + РасширениеУсловияЗапроса);
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
		// Эквайринг
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаРасчетов КАК ВалютаДокумента");
		// Конец Эквайринг
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
		КонецЕсли;
		
		Если МетаданныеДокумента.Имя = "СчетФактура"
			ИЛИ МетаданныеДокумента.Имя = "СчетФактураПолученный" Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента + СуммаНДСДокумента КАК СуммаДокумента");
			
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "Организация КАК Организация");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "NULL КАК Организация");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "Ответственный КАК Ответственный");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "NULL КАК Ответственный");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("СостояниеЗаказа") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "СостояниеЗаказа КАК СостояниеЗаказа");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "NULL КАК СостояниеЗаказа");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Состояние") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "Состояние КАК Состояние");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "NULL КАК Состояние");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "Автор КАК Автор");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "NULL КАК Автор");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "ВидОперации КАК ВидОперации");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "NULL КАК ВидОперации");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено  Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "Контрагент КАК Контрагент");
			
			Если ЕстьОтборПоКонтрагентам Тогда
				Запрос.УстановитьПараметр("ОтборПоКонтрагентам", ОтборПоКонтрагентам);
			КонецЕсли;
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "NULL КАК Контрагент");
			
			Если ЭтоДокументСобытие Тогда
				Запрос.УстановитьПараметр("ОтборПоКонтрагентам", ОтборПоКонтрагентам);
			ИначеЕсли ЕстьОтборПоКонтрагентам Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, РасширениеУсловияЗапроса, "");
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЗамены = СтрШаблон("%1 КАК ДатаВходящего", ?(ЭтоДокументСВходящимНомеромИДатой, "ДатаВходящегоДокумента", "Null"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", СтрокаЗамены);
		
		СтрокаЗамены = СтрШаблон("%1 КАК НомерВходящий", ?(ЭтоДокументСВходящимНомеромИДатой, "НомерВходящегоДокумента", "Null"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", СтрокаЗамены);
		
		Если МетаданныеДокумента.Реквизиты.Найти("Номер") <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
			
		Иначе
			
			Попытка
				
				ЕстьНомер = ТипЗнч(МетаданныеДокумента.СтандартныеРеквизиты.Номер);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
				
			Исключение
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Комментарий КАК Комментарий");
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", 
			"ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Тема) = ТИП(Справочник.ТемыСобытий) ТОГДА ВЫРАЗИТЬ(Тема КАК Справочник.ТемыСобытий).Наименование ИНАЧЕ ВЫРАЗИТЬ(Тема КАК СТРОКА) КОНЕЦ КАК Комментарий");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", """"" КАК Комментарий");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		
		Выборка  = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
				
				СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
				СтрокаДерева.Ссылка= Выборка.Ссылка;
				СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
				СтрокаДерева.ВидДокумента = Выборка.Метаданные;
				СтрокаДерева.Проведен = Выборка.Проведен;
				СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
				СтрокаДерева.ОграничениеПоРодителям = Истина;
				//СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
				СтрокаДерева.Номер = Выборка.Номер; 
				
				Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
					
					КонтрагентДокумента = КонтрагентДокументаСобытие(СтрокаДерева.Ссылка);
					Если КонтрагентДокумента = "Несколько" Тогда
						СтрокаДерева.НесколькоКонтрагентов = Истина;
					Иначе
						СтрокаДерева.Контрагент = КонтрагентДокумента;
					КонецЕсли;
					
				Иначе
					СтрокаДерева.Ответственный = Выборка.Ответственный;
					СтрокаДерева.ВалютаДокумента= Выборка.ВалютаДокумента;
					СтрокаДерева.СуммаДокумента= Выборка.СуммаДокумента;
					СтрокаДерева.Организация = Выборка.Организация;
					СтрокаДерева.Контрагент = Выборка.Контрагент;
					СтрокаДерева.СостояниеЗаказа = Выборка.СостояниеЗаказа;
				КонецЕсли;
				
				СтрокаДерева.ВидОперации = Выборка.ВидОперации;
				СтрокаДерева.Автор = Выборка.Автор;
				СтрокаДерева.Состояние = Выборка.Состояние;
				
				Если ЭтоДокументСВходящимНомеромИДатой Тогда
					
					НомерВходящий = ?(ЗначениеЗаполнено(Выборка.НомерВходящий), Выборка.НомерВходящий, "<..>");
					
					ДатаДокумента = Формат(Выборка.ДатаВходящего, "ДФ=dd.MM.yyyy");
					Если ПустаяСтрока(ДатаДокумента) Тогда
						
						ДатаДокумента = Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yyyy");
						
					КонецЕсли;
					
					ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
					
					СтрокаДерева.ДокументПредставление = СтрШаблон(НСтр("ru ='%1 %2 (вх. %3) от %4'"), МетаданныеДокумента.Синоним, ПредставлениеНомера, НомерВходящий, ДатаДокумента);
					
				Иначе
					
					СтрокаДерева.ДокументПредставление = Выборка.Представление;
					
				КонецЕсли;
				
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	мДерево = СтрокаДерева;
	
	//УстановитьУсловноеОформление();
	
КонецПроцедуры

// Функция преобразует многострочную строку в однострочную.
Функция ПреобразоватьМногострочнуюСтроку(МногострочнаяСтрока)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МногострочнаяСтрока, Символы.ПС, Истина);
	Возврат СтрСоединить(МассивСтрок, " ");
	
КонецФункции  

Функция  КонтрагентДокументаСобытие(СсылкаНаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытиеУчастники.Контакт КАК Контрагент
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	СобытиеУчастники.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(СобытиеУчастники.Контакт) = ТИП(Справочник.Контрагенты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда 
		Возврат "Несколько";
	ИначеЕсли Выборка.Количество() = 1 Тогда 
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Контрагент;
		КонецЦикла;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Процедура осуществляет вывод подчиненных документов.
//
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева, ТекущийДокумент = Неопределено)

	мУжеВСписке = новый Соответствие;
		
	Если ТекущийДокумент = Неопределено Тогда
		ТекущийДокумент = СтрокаДерева.Ссылка;
	КонецЕсли;
	
	Таблица = ПолучитьСписокПодчиненныхДокументов(ТекущийДокумент);
	КэшПоТипамДокументов = Новый Соответствие;
	
	ДокументыСоВходящимиДанными = ДокументыСоВходящимиДанными();
	//мКэшРеквизитовДокумента = СоздатьКэшДокументов(ИмяДокумента);
	мКэшРеквизитовДокумента = новый Структура;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		

		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента, мКэшРеквизитовДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	Если КэшПоТипамДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение Из КэшПоТипамДокументов Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
					|ВЫБРАТЬ ", "
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ") + "
					|Дата, Ссылка, Проведен, ПометкаУдаления, Представление,  """ + КлючИЗначение.Ключ + """ КАК Метаданные, #Валюта, #Сумма, #Организация, #ДатаВходящего, 
					|#НомерВходящий, #Номер, #Комментарий, #Ответственный, #СостояниеЗаказа, #Автор, #ВидОперации, #Контрагент, #Состояние 
					|ИЗ Документ." + КлючИЗначение.Ключ + "
					|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";  
					
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаДокумента"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаДенежныхСредств"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
		// Эквайринг
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаРасчетов"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаРасчетов КАК ВалютаДокумента");
		// Конец Эквайринг
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["НомерКорректировки"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние ", "#Состояние, #НомерКорректировки");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерКорректировки", "НомерКорректировки КАК НомерКорректировки");
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "СчетФактура"
			ИЛИ КлючИЗначение.Ключ = "СчетФактураПолученный" Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента + СуммаНДСДокумента КАК СуммаДокумента");
			
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"] Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
			
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Всего"] Тогда
		
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "Всего КАК СуммаДокумента");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
			
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Организация"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "Организация КАК Организация");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "NULL КАК Организация");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ДатаВходящего"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", "ДатаВходящегоДокумента КАК ДатаВходящего");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", "NULL КАК ДатаВходящего");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["НомерВходящий"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", "НомерВходящегоДокумента КАК НомерВходящий");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", "NULL КАК НомерВходящий");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Номер"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Ответственный"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "Ответственный КАК Ответственный");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "NULL КАК Ответственный");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["СостояниеЗаказа"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "СостояниеЗаказа КАК СостояниеЗаказа");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "NULL КАК СостояниеЗаказа");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Состояние"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "Состояние КАК Состояние");
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Выполнена"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", 
				"ВЫБОР КОГДА Выполнена ТОГДА &ТекстВыполненнойЗадачи ИНАЧЕ &ТекстНеВыполненнойЗадачи КОНЕЦ КАК Состояние");
			Запрос.УстановитьПараметр("ТекстВыполненнойЗадачи", НСтр("ru='Выполнена'"));
			Запрос.УстановитьПараметр("ТекстНеВыполненнойЗадачи", НСтр("ru='Не выполнена'"));
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "NULL КАК Состояние");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Автор"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "Автор КАК Автор");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "NULL КАК Автор");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВидОперации"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "ВидОперации КАК ВидОперации");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "NULL КАК ВидОперации");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Контрагент"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "Контрагент КАК Контрагент");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "NULL КАК Контрагент");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Комментарий"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Комментарий КАК Комментарий");
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Тема"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", 
				"ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Тема) = ТИП(Справочник.ТемыСобытий) ТОГДА ВЫРАЗИТЬ(Тема КАК Справочник.ТемыСобытий).Наименование ИНАЧЕ ВЫРАЗИТЬ(Тема КАК СТРОКА) КОНЕЦ КАК Комментарий");
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Описание"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Описание КАК Комментарий");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", """"" КАК Комментарий");
		КонецЕсли;
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭтоКорректировочноеУведомлениеОбОстатках = Ложь;
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров")
			И Выборка.НомерКорректировки > 0 Тогда
			ЭтоКорректировочноеУведомлениеОбОстатках = Истина;
		КонецЕсли;
		
		Попытка
			ТекСтрока = мУжеВСписке[Выборка.Ссылка];	
		Исключение
			ТекСтрока = Неопределено;
		КонецПопытки;
		
		Если ТекСтрока = Неопределено Тогда
			
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента;
			НоваяСтрока.ВалютаДокумента = Выборка.ВалютаДокумента;
			НоваяСтрока.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
			НоваяСтрока.Проведен = Выборка.Проведен;
			НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
			//НоваяСтрока.Картинка = НомерКартинки(НоваяСтрока);
			НоваяСтрока.ВидДокумента = Выборка.Метаданные;
			НоваяСтрока.ПроведениеРазрешено = Выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
			НоваяСтрока.Организация = Выборка.Организация; 
			НоваяСтрока.Номер = Выборка.Номер; 
			НоваяСтрока.Ответственный = Выборка.Ответственный;
			
			Если ТипЗнч(НоваяСтрока.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
				
				КонтрагентДокумента = КонтрагентДокументаСобытие(НоваяСтрока.Ссылка);
				Если КонтрагентДокумента = "Несколько" Тогда
					НоваяСтрока.НесколькоКонтрагентов = Истина;
				Иначе
					НоваяСтрока.Контрагент = КонтрагентДокумента;
				КонецЕсли;
				
			Иначе
				НоваяСтрока.Контрагент = Выборка.Контрагент;
			КонецЕсли;
			
			НоваяСтрока.ВидОперации = Выборка.ВидОперации;
			НоваяСтрока.Автор = Выборка.Автор;
			НоваяСтрока.СостояниеЗаказа = Выборка.СостояниеЗаказа;
			НоваяСтрока.Состояние = Выборка.Состояние;
			
			МетаданныеДокументаСсылки = Выборка.Ссылка.Метаданные();
			ЭтоДокументСВходящимНомеромИДатой = ДокументыСоВходящимиДанными.Найти(МетаданныеДокументаСсылки.Имя) <>  Неопределено;
			Если ЭтоДокументСВходящимНомеромИДатой Тогда
				
				НомерВходящий = ?(ЗначениеЗаполнено(Выборка.НомерВходящий), Выборка.НомерВходящий, "<..>");
				
				ДатаДокумента = Формат(Выборка.ДатаВходящего, "ДФ=dd.MM.yyyy");
				Если ПустаяСтрока(ДатаДокумента) Тогда
					
					ДатаДокумента = Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yyyy");
					
				КонецЕсли;
				
				ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
				
				НоваяСтрока.ДокументПредставление = СтрШаблон(НСтр("ru ='%1 %2 (вх. %3) от %4'"), КэшПоТипамДокументов[Выборка.Метаданные].Синоним, ПредставлениеНомера, НомерВходящий, ДатаДокумента);
				
			Иначе
				
				ПредставлениеДокумента = Выборка.Представление;
				
				Если ЭтоКорректировочноеУведомлениеОбОстатках Тогда
					ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, НСтр("ru='Уведомление'"), НСтр("ru='Корректировочное уведомление'"));
				КонецЕсли;
				
				НоваяСтрока.ДокументПредставление = ПредставлениеДокумента;
				
				
			КонецЕсли;
			
			мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеДокументы(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Функция СоздатьКэшДокументов(ИмяДокумента)
   	мКэшРеквизитовДокумента = новый Соответствие;
	РеквизитыДокументаКэш = мКэшРеквизитовДокумента[ИмяДокумента]; 
	МетаданныеДокумента = Метаданные.Документы[ИмяДокумента];
	
	Если РеквизитыДокументаКэш = Неопределено Тогда
		
		РеквизитыДокументаКэш = Новый Соответствие;
		РеквизитыДокументаКэш.Вставить("ВалютаДокумента",			МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВалютаДенежныхСредств",	МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВалютаРасчетов",			МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено); // Эквайринг
		РеквизитыДокументаКэш.Вставить("СуммаДокумента",			МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Комментарий",				МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Тема",						МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Организация",				МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("ДатаВходящего",			МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("НомерВходящий",			МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("Номер",					МетаданныеДокумента.Реквизиты.Найти("Номер") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Ответственный",			МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено);
		
		РеквизитыДокументаКэш.Вставить("Автор",			МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВидОперации",			МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Контрагент",			МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("СостояниеЗаказа",			МетаданныеДокумента.Реквизиты.Найти("СостояниеЗаказа") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Состояние",			МетаданныеДокумента.Реквизиты.Найти("Состояние") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Выполнена", МетаданныеДокумента.Реквизиты.Найти("Выполнена") <> Неопределено);
		
		РеквизитыДокументаКэш.Вставить("НомерКорректировки",			МетаданныеДокумента.Реквизиты.Найти("НомерКорректировки") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Всего",			МетаданныеДокумента.Реквизиты.Найти("Всего") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Описание", МетаданныеДокумента.Реквизиты.Найти("Описание") <> Неопределено);
		
		Если РеквизитыДокументаКэш["Номер"] = Ложь Тогда
			
			Попытка
				
				ЕстьНомер = ТипЗнч(МетаданныеДокумента.СтандартныеРеквизиты.Номер);
				ЕстьНомер = Истина;
				
			Исключение
				
				ЕстьНомер = Ложь;
				
			КонецПопытки;
			
			РеквизитыДокументаКэш["Номер"] = ЕстьНомер;
			
		КонецЕсли;
		
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокументаКэш);
		
	КонецЕсли;  
	
	Возврат мКэшРеквизитовДокумента;
	
КонецФункции

// Процедура дополняет кэш метаданных.
//
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента, мКэшРеквизитовДокумента)
	
	Попытка
		РеквизитыДокументаКэш = мКэшРеквизитовДокумента[ИмяДокумента]; 
	Исключение 
		РеквизитыДокументаКэш = Неопределено;
	КонецПопытки;
	Если РеквизитыДокументаКэш = Неопределено Тогда
		
		РеквизитыДокументаКэш = Новый Соответствие;
		РеквизитыДокументаКэш.Вставить("ВалютаДокумента",			МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВалютаДенежныхСредств",	МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВалютаРасчетов",			МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено); // Эквайринг
		РеквизитыДокументаКэш.Вставить("СуммаДокумента",			МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Комментарий",				МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Тема",						МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Организация",				МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("ДатаВходящего",			МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("НомерВходящий",			МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("Номер",					МетаданныеДокумента.Реквизиты.Найти("Номер") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Ответственный",			МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено);
		
		РеквизитыДокументаКэш.Вставить("Автор",			МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВидОперации",			МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Контрагент",			МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("СостояниеЗаказа",			МетаданныеДокумента.Реквизиты.Найти("СостояниеЗаказа") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Состояние",			МетаданныеДокумента.Реквизиты.Найти("Состояние") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Выполнена", МетаданныеДокумента.Реквизиты.Найти("Выполнена") <> Неопределено);
		
		РеквизитыДокументаКэш.Вставить("НомерКорректировки",			МетаданныеДокумента.Реквизиты.Найти("НомерКорректировки") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Всего",			МетаданныеДокумента.Реквизиты.Найти("Всего") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Описание", МетаданныеДокумента.Реквизиты.Найти("Описание") <> Неопределено);
		
		Если РеквизитыДокументаКэш["Номер"] = Ложь Тогда
			
			Попытка
				
				ЕстьНомер = ТипЗнч(МетаданныеДокумента.СтандартныеРеквизиты.Номер);
				ЕстьНомер = Истина;
				
			Исключение
				
				ЕстьНомер = Ложь;
				
			КонецПопытки;
			
			РеквизитыДокументаКэш["Номер"] = ЕстьНомер;
			
		КонецЕсли;
		
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокументаКэш);
		
	КонецЕсли;
	
КонецПроцедуры     

Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава Из Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		Если НЕ ЭлементСостава.Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		Если НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ Объект" + СтруктураПутьКДанным.ВидОбъекта + "." + СтруктураПутьКДанным.ИмяРеквизита
			+ " = &ЗначениеКритерияОтбора";
			
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".") - 1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|Объект" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК Объект" + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Если ТекстЗапроса<>"" Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе	
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
КонецФункции    

// Функция возвращает путь к объекту метаданных
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным) Экспорт
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 По 3 Цикл
		
		Точка = СтрНайти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 По 5  Цикл 
			
			Точка = СтрНайти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если Структура.ТипОбъекта = "Документ" Тогда
		Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
	Иначе
		Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // РазобратьПутьКОбъектуМетаданных()      

 // Произвольная функция
Функция ПолучитьДеревоКакJSON(ДеревоЗначений)
	
	// ДеревоЗначений - ваше значение тип "ДеревоЗначений" для преобразования
		
	СтруктураДерева = Новый Структура();
	
	ДеревоВСтруктуру(ДеревоЗначений.Строки, СтруктураДерева); 
	
    	//Arr_JSON.ПривестиКПримитивномуТипу(СтруктураДерева, ДеревоЗначений);
   	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, СтруктураДерева);
	Результат = ЗаписьJSON.Закрыть(); 
	
	Возврат Результат

КонецФункции
// Функция преобразования
Функция ДеревоВСтруктуру(СтрокиДерева, СтруктураДерева)

	МассивСтрок = Новый Массив();
	
	Для Каждого Строка Из СтрокиДерева Цикл
				
		ДанныеСтроки = СтрокаТаблицыЗначенийВСтруктуру(Строка);
		ДанныеСтроки.Вставить("Строки", Новый Структура);
		
		ДеревоВСтруктуру(Строка.Строки, ДанныеСтроки);	
		
		МассивСтрок.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	СтруктураДерева.Вставить("Строки", МассивСтрок);
	
КонецФункции

// Взято из БСП (вынес отдельно)  
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, Строка(СтрокаТаблицыЗначений[Колонка.Имя])); 
		
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицыЗначений[Колонка.Имя])) 
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицыЗначений[Колонка.Имя])) тогда
			Структура.Вставить(СтрШаблон("%1_GUID", Колонка.Имя), Строка(СтрокаТаблицыЗначений[Колонка.Имя].УникальныйИдентификатор()));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти //ПолучениеСвязанныхДокументов

#Область СлужебныеПроцедурыИФункции

//Поверх типового 404 накладывается дополнительная проверка на отсутствие метода, поступающего на входной контроллер методов, т.к. имя метода параметризируемо.
Функция Обработать404() 
	Ответ = Новый HTTPСервисОтвет(404);  
	Ответ.УстановитьТелоИзСтроки("ResourceNotFound: Запрашиваемый вами метод не был найден", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
    	Возврат Ответ;
КонецФункции

//Функция обрабатывает исключительную ситуацию, когда переопределяемый модуль авторизации не смог авторизовать пользователя.
Функция Обработать401()
	Ответ = Новый HTTPСервисОтвет(404);  
	Ответ.УстановитьТелоИзСтроки("Unauthorized: Авторизация пользователя не пройдена", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
    	Возврат Ответ;
КонецФункции

//Обработка исключительной ситуации, когда в параметры методов для получения информации не поступили ключевые метаданные.
Функция Обработать400()
	Ответ = Новый HTTPСервисОтвет(400);  
	Ответ.УстановитьТелоИзСтроки("InvalidInput: Проверьте корректность введённых в методе параметров", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
    	Возврат Ответ;
КонецФункции  
	
//Обработка исключительной ситуации, когда процедура завершилась с ошибкой.
Функция Обработать500(ОО)
	Ответ = Новый HTTPСервисОтвет(500);  
	Ответ.УстановитьТелоИзСтроки(СтрШаблон("InternalError: Произошла внутренняя ошибка: %1", ОО), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
    	Возврат Ответ;
КонецФункции

Функция ТаблицаСуществует(Таблица)
	МассивНаименованийДокументов = новый Массив;
	
	Для каждого Элем из Метаданные.Документы цикл
		МассивНаименованийДокументов.Добавить(Элем.Имя);		
	КонецЦикла; 
	
	НайденнаяТаблица = МассивНаименованийДокументов.Найти(Таблица);
	
	Возврат НайденнаяТаблица <> Неопределено;
	
КонецФункции

#КонецОбласти //СлужебныеПроцедурыИФункции
